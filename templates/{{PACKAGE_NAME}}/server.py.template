"""{{SERVICE_NAME}} MCP Server."""

import os
from typing import Any, Dict, Optional

from dotenv import load_dotenv
from mcp_base import BaseMCPServer, BearerTokenAPIClient, paginated_endpoint, build_api_params

# Load environment variables from .env file
load_dotenv()


class {{SERVER_CLASS_NAME}}(BaseMCPServer):
    """MCP Server for {{SERVICE_NAME}} integration."""
    
    def __init__(
        self,
        base_url: str = "{{API_BASE_URL}}",
        api_token: Optional[str] = None,
    ):
        """Initialize the {{SERVICE_NAME}} MCP Server.
        
        Args:
            base_url: {{SERVICE_NAME}} API base URL
            api_token: {{SERVICE_NAME}} API token (can also be set via {{API_TOKEN_ENV_VAR}} env var)
        """
        # Get API token from environment if not provided
        api_token = api_token or os.getenv("{{API_TOKEN_ENV_VAR}}")
        
        if not api_token:
            raise RuntimeError(
                "{{API_TOKEN_ENV_VAR}} environment variable is required. "
                "Please set it in your .env file or environment."
            )
        
        # Create API client
        api_client = BearerTokenAPIClient(
            base_url=base_url,
            api_token=api_token,
            user_agent="{{PROJECT_NAME}}/0.1.0"
        )
        
        super().__init__(
            name="{{SERVICE_NAME}} MCP Server",
            api_client=api_client,
        )
    
    async def test_connection(self) -> bool:
        """Test connection to {{SERVICE_NAME}} API."""
        try:
            # Replace with actual API endpoint for testing
            await self.api_client.get("ping")  # or appropriate test endpoint
            return True
        except Exception:
            return False
    
    def register_tools(self) -> None:
        """Register all {{SERVICE_NAME}} tools with the MCP server."""
        
        @self.mcp.tool
        @paginated_endpoint()
        async def list_items(
            page: int = 1,
            per_page: int = 50,
            category: Optional[str] = None,
        ) -> Dict[str, Any]:
            """List items from {{SERVICE_NAME}}.
            
            Args:
                page: Page number (default: 1)
                per_page: Number of items per page (default: 50, max: 100)
                category: Optional category filter
            """
            params = build_api_params(
                page=page,
                per_page=per_page,
                category=category
            )
            return await self.api_client.get("items", params=params)
        
        @self.mcp.tool
        async def get_item(item_id: int) -> Dict[str, Any]:
            """Get detailed information about a specific item.
            
            Args:
                item_id: The ID of the item to retrieve
            """
            return await self.api_client.get(f"items/{item_id}")
        
        # Add more tools here following the same pattern
        # Example:
        # @self.mcp.tool
        # async def search_items(query: str) -> Dict[str, Any]:
        #     """Search for items."""
        #     return await self.api_client.get("items/search", params={"q": query})


def main():
    """Main entry point for the MCP server."""
    server = {{SERVER_CLASS_NAME}}()
    server.run()


if __name__ == "__main__":
    main()